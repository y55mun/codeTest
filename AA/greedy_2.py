"""1이 될 때까지
어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
1. N에서 1을 뺍니다.
2. N을 K로 나눕니다.
예를 들어 N이 17, K가 4라고 가정합시다. 이때 1번의 과정을 한 번 수행하면 N은 16이 됩니다ㅏ. 이후에 2번의 과정을 두 번 수행하면 N은 1이 됩니다.
결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 됩니다. 이는 N을 1로 만드는 최소 횟수 입니다.
N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요.

입력 조건
첫째 줄에 N(1<=N<=100,000)과 K(2<=K<=100,000)가 공백을 기준으로 하여 각각 자연수로 주어집니다.

출력 조건
첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력합니다.

입력 예시
25 5

출력 예시
2

"""
"""문제 해결 아이디어
- 주어진 N에 대하여 최대한 많이 나누기를 수행하면 됨
- N의 값을 줄일 때 2이상의 수로 나누는 작업이 1을 빼는 작업보다 수를 훨씬 많이 줄일 수 있음

Q. 정당성 분석
- 가능하면 최대한 많이 나누는 작업이 최적의 해를 항상 보장할 수 있을까?
A. N이 아무리 큰 수여도, K로 계속 나눈다면 기하급수적으로 빠르게 줄일 수 있다. 
다시 말해 K가 2 이상이기만 하면, K로 나누는것이 1을 빼는 것 보다 항상 빠르게 N을 줄일 수 있다.
또한 N은 항상 1에 도달하게 된다. (최적의 해 성립)
"""
n, k = map(int, input().split())

result = 0

while True:
    # n이 k로 나누어 떨어지는 수가 될 때까지 빼기
    target = (n//k) * k
    result += (n-target)
    n = target

    # n이 k보다 작을 때 (더 이상 나눌 수 없을 때) 3_반복문 탈출
    if n < k:
        break

    # k로 나누기
    result += 1
    n //= k

# 마지막으로 남은 수에 대하여 1씩 빼기
result += (n-1)
print(result)

